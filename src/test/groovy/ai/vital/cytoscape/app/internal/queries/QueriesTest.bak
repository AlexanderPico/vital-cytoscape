package ai.vital.cytoscape.app.internal.queries

import ai.vital.cytoscape.app.internal.app.Application;
import ai.vital.domain.ontology.VitalOntology;
import ai.vital.vitalservice.VitalService;
import ai.vital.vitalservice.factory.VitalServiceFactory;
import ai.vital.vitalservice.query.ResultList;
import ai.vital.vitalservice.query.VitalGraphQuery;
import ai.vital.vitalservice.query.VitalPathQuery;
import ai.vital.vitalservice.query.VitalSelectQuery;
import ai.vital.vitalsigns.VitalSigns;
import ai.vital.vitalsigns.meta.GraphContext;
import ai.vital.vitalsigns.meta.PathElement;
import ai.vital.vitalsigns.model.GraphObject
import ai.vital.vitalsigns.model.VITAL_Edge
import ai.vital.vitalsigns.model.VitalApp
import ai.vital.vitalsigns.model.VitalSegment;
import ai.vital.vitalsigns.model.VitalServiceKey;
import ai.vital.vitalsigns.model.property.URIProperty;
import ai.vital.vitalsigns.ontology.VitalCoreOntology;
import junit.framework.TestCase



class QueriesTest extends TestCase {

	public static void main(String[] args) {
		
//		_testSearchQuery();
		
//		_testConnectionsQuery();
	
//		_testMovieLens();
		
		_testEnron();
			
	}
	
	public static void _testEnron() {
		
		VitalServiceKey key = new VitalServiceKey()
		key.generateURI((VitalApp) null)
		key.key = 'uQxG-RdSb-bdIm' 
		
		VitalService service = VitalServiceFactory.openService(key, 'primeremoteenron')
		
		String u = "http://vital.ai/cuttime/app/EnronPerson/sandra.mccubbin%40enron.com" // 7669 objects
//		String u = 'http://vital.ai/vital.ai/app/EnronPerson/jeff.dasovich%40enron.com' // 19837
		
		VitalSegment enronSegment = service.getSegment('enron')
		
		GraphObject p1 = service.get(GraphContext.ServiceWide, URIProperty.withString(u)).first()
		
		GraphObject g1 = p1
		
		VitalSigns vs = VitalSigns.get()
		
		List<List<PathElement>> fPaths = vs.getClassesRegistry().getPaths(g1.getClass(), true);
		List<List<PathElement>> rPaths = vs.getClassesRegistry().getPaths(g1.getClass(), false);
		
		
		List<Class<? extends VITAL_Edge>> fC = []
		for(List<PathElement> p : fPaths) {
			if(!p[0].isHyperedge()) {
				fC.add(p[0].getEdgeClass())
			}
		}
		
		List<Class<? extends VITAL_Edge>> rC = []
		for(List<PathElement> p : rPaths) {
			if(!p[0].isHyperedge()) {
				rC.add(p[0].getEdgeClass())
			}
		}
		
//		VitalPathQuery q2 = Queries.connectionsQuery([VitalSegment.withId("enron")], g1.URI, 1, fC, rC)
//		rC.clear()
		
		VitalGraphQuery q2 = Queries.connectionsQueyGraph([enronSegment], g1.URI, 1, 0, 1000, fC, rC)

		q2.setReturnSparqlString(false)
		
		long start = System.currentTimeMillis();
				
		ResultList rl2 = service.query(q2);
		
		println(rl2.getStatus().getMessage());
//		
//		
//		for(GraphObject g : rl2) {
//			println "QUERY RES: " + g
//		}
//		
//		
//		Map<String, GraphObject> m = new HashMap<String, GraphObject>()
//				
//		Application.filterGraphMatch(rl2, m)
//		
//		for(GraphObject x : m.values()) {
//			println("Obj: " + x);
//		}
//		
		println rl2.results.size()
		
		println "GRAPH time: ${System.currentTimeMillis() - start}ms"
		
		
	}
	
	public static void _testMovieLens() {
		
		VitalServiceFactory.setServiceProfile("vitaldevelopmentprime")
		
		VitalSelectQuery q = Queries.searchQuery([VitalSegment.withId('movielens')], "user", 0, 1000, VitalCoreOntology.NS + "hasName", true)
		
		VitalServiceFactory.setServiceProfile("vitaldevelopmentprime")
		
		VitalService service = VitalServiceFactory.getVitalService();
		
		ResultList rl = service.query(q);
		
		println rl.results.size()
		
		int i = 1
		for(GraphObject g : rl) {
			println "$i " + g
			i++
		}
		
		println q
		
		GraphObject g1 = rl.first()
		
		VitalSigns vs = VitalSigns.get()
		
		List<List<PathElement>> fPaths = vs.getClassesRegistry().getPaths(g1.getClass(), true);
		List<List<PathElement>> rPaths = vs.getClassesRegistry().getPaths(g1.getClass(), false);
		
		
		List<Class<? extends VITAL_Edge>> fC = []
		for(List<PathElement> p : fPaths) {
			if(!p[0].isHyperedge()) {
				fC.add(p[0].getEdgeClass())
			}
		}
		
		List<Class<? extends VITAL_Edge>> rC = []
		for(List<PathElement> p : rPaths) {
			if(!p[0].isHyperedge()) {
				rC.add(p[0].getEdgeClass())
			}
		}
		
		VitalPathQuery q2 = Queries.connectionsQuery([VitalSegment.withId("movielens")], g1.URI, 1, fC, rC)
		
		ResultList rl2 = service.query(q2);
		
		
		for(GraphObject g : rl2) {
			println "QUERY RES: " + g
		}
		
		
	}
	
	public void test() {
		
	}

	public static void _testSearchQuery() {
		
		VitalSigns vs = VitalSigns.get()
		
		VitalSelectQuery q = Queries.searchQuery([VitalSegment.withId("wordnet")], "apple", 0, 10, VitalCoreOntology.NS + "hasName", true)
		
		VitalServiceFactory.setServiceProfile("vitaldevelopmentprime")
		
		VitalService service = VitalServiceFactory.getVitalService();
		
		ResultList rl = service.query(q);
		
		println rl.results.size()
		
		for(GraphObject g : rl) {
			println g
		}
		
	}	

	/*
	public static void _testConnectionsQuery() {
		
		VitalSigns vs = VitalSigns.get()
		
		
		VitalServiceFactory.setServiceProfile("vitaldevelopmentprime")
		
		VitalService service = VitalServiceFactory.getVitalService();
		
		List<List<PathElement>> fPaths = vs.getClassesRegistry().getPaths(NounSynsetNode.class, true);
		List<List<PathElement>> rPaths = vs.getClassesRegistry().getPaths(NounSynsetNode.class, true);
		
		List<Class<? extends VITAL_Edge>> fC = []
		for(List<PathElement> p : fPaths) {
			if(!p[0].isHyperedge()) {
				fC.add(p[0].getEdgeClass())
			}
		}
		
		List<Class<? extends VITAL_Edge>> rC = []
		for(List<PathElement> p : rPaths) {
			if(!p[0].isHyperedge()) {
				rC.add(p[0].getEdgeClass())
			}
		}
		
		VitalPathQuery q = Queries.connectionsQuery([VitalSegment.withId("wordnet")], 'http://vital.ai/vital/vital/NounSynsetNode/1415978164409_707864632', 1, fC, rC)
		
		ResultList rl = service.query(q);
		
		println rl.results.size()
		
		println q
		
	}	
	*/
}
